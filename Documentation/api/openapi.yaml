openapi: 3.0.0
info:
    title: WordOff
    description: PDG project
    contact:
        name: Christopher Meier
        email: christopher.meier@heig-vd.ch
    version: 0.2.0
paths:
    /letters/{lang}:
        get:
            tags:
                - letter
            description: Return the list of the letters associated with the given language.
            responses:
                '200':
                    description: The list of letters. As characters.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                '400':
                    $ref: '#/components/responses/MalformedRequest'
        parameters:
            - name: lang
              in: path
              description: The language associated with the letters.
              required: true
              schema:
                  type: string
    /me:
        get:
            tags:
                - me
            description: Return information about the current user with endpoints (links).
            responses:
                '200':
                    description: The information about the current user.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MeDto'
                '401':
                    $ref: '#/components/responses/Unauthorized'
            security:
                - jwt:
                    - read:me
        put:
            tags:
                - me
            description: Update the current user profile.
            requestBody:
                description: The new profile.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MeDto'
            responses:
                '200':
                    description: The profile has been updated. Return the updated profile.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MeDto'
                '400':
                    $ref: '#/components/responses/MalformedRequest'
                '422':
                    $ref: '#/components/responses/InvalidContent'
            security:
                - jwt:
                    - write:me
    /me/notifications:
        get:
            tags:
                - me
            description: Return the list of your notifications.
            responses:
                '200':
                    description: The list of your notifications.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/NotificationDto'
                '401':
                    $ref: '#/components/responses/Unauthorized'
            security:
                - jwt:
                    - read:me
    /me/invitations:
        get:
            tags:
                - me
            description: Return the list of your invitations.
            responses:
                '200':
                    description: The list of your invitations.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/InvitationDto'
                '401':
                    $ref: '#/components/responses/Unauthorized'
            security:
                - jwt:
                    - read:me
    /me/adversaries:
        get:
            tags:
                - me
            description: Return the list of your adversaries. The users with whom you have recently had a game.
            responses:
                '200':
                    description: The list of your adversaries.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/UserSummaryDto'
                '401':
                    $ref: '#/components/responses/Unauthorized'
            security:
                - jwt:
                    - read:me
    /me/relations:
        get:
            tags:
                - me
            description: Return the list of your relations. Your friends and your blocked users.
            responses:
                '200':
                    description: The list of your relations.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/RelatedUserSummaryDto'
                '401':
                    $ref: '#/components/responses/Unauthorized'
            security:
                - jwt:
                    - read:me
    /me/relations/{userId}:
        put:
            tags:
                - me
            description: Update relation between yourself and the given user.
            requestBody:
                description: The updated relation.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RelationDto'
            responses:
                '200':
                    description: The updated relations.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RelationDto'
                '422':
                    $ref: '#/components/responses/InvalidContent'
                '401':
                    $ref: '#/components/responses/Unauthorized'
            security:
                - jwt:
                    - read:me
        parameters:
            - $ref: '#/components/parameters/userIdParam'
    /modes:
        get:
            tags:
                - mode
            description: Return the list of your modes.
            responses:
                '200':
                    description: The list of your modes.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/ModeSummaryDto'
                '401':
                    $ref: '#/components/responses/Unauthorized'
            security:
                - jwt:
                    - read:mode
        post:
            tags:
                - mode
            description: Create a new mode.
            requestBody:
                description: The mode that should be created.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ModeDto'
            responses:
                '201':
                    description: The mode has been created. Return a summary of the created mode.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ModeSummaryDto'
                '400':
                    $ref: '#/components/responses/MalformedRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '422':
                    $ref: '#/components/responses/InvalidContent'
            security:
                - jwt:
                    - write:mode
    /modes/{modeId}:
        get:
            tags:
                - mode
            description: Return the current state of the mode.
            responses:
                '200':
                    description: The current state of the mode.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ModeDto'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '422':
                    $ref: '#/components/responses/InvalidContent'
            security:
                - jwt:
                    - read:mode
        parameters:
            - $ref: '#/components/parameters/modeIdParam'
    /modes/{modeId}/messages:
        get:
            tags:
                - mode
            description: Return the messages associated with the mode.
            parameters:
                - name: since
                  in: query
                  description: The id of the last received message.
                  schema:
                      type: integer
            responses:
                '200':
                    description: The list of the message.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/MessageDto'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '422':
                    $ref: '#/components/responses/InvalidContent'
            security:
                - jwt:
                    - read:mode
        post:
            tags:
                - mode
            description: Send a new message.
            requestBody:
                description: The message that should be sent.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MessageDto'
            responses:
                '201':
                    description: The message has been created. Return the created message.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MessageDto'
                '400':
                    $ref: '#/components/responses/MalformedRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '422':
                    $ref: '#/components/responses/InvalidContent'
            security:
                - jwt:
                    - write:mode
        parameters:
            - $ref: '#/components/parameters/modeIdParam'
    /games/{gameId}:
        get:
            tags:
                - game
            description: Return the current state of the game.
            responses:
                '200':
                    description: The current state of the game.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GameDto'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '422':
                    $ref: '#/components/responses/InvalidContent'
            security:
                - jwt:
                    - read:game
        parameters:
            - $ref: '#/components/parameters/gameIdParam'
    /games/{gameId}/challenge:
        post:
            tags:
                - game
            description: Post the chosen word for the current challenge.
            requestBody:
                description: The finished state of the challenge.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ChallengeDto'
            responses:
                '200':
                    description: The chosen word has been accepted and saved. The new game is returned.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GameDto'
                '400':
                    $ref: '#/components/responses/MalformedRequest'
                '422':
                    $ref: '#/components/responses/InvalidContent'
                '401':
                    $ref: '#/components/responses/Unauthorized'
            security:
                - jwt:
                    - write:challenge
        parameters:
            - $ref: '#/components/parameters/gameIdParam'
    /games/{gameId}/powers:
        post:
            tags:
                - game
            description: Call the chosen power to be used.
            requestBody:
                description: The power that should be used.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PowerDto'
            responses:
                '200':
                    description: The power has been used. The resulting game is returned.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GameDto'
                '400':
                    $ref: '#/components/responses/MalformedRequest'
                '422':
                    $ref: '#/components/responses/InvalidContent'
                '401':
                    $ref: '#/components/responses/Unauthorized'
            security:
                - jwt:
                    - write:powers
        parameters:
            - $ref: '#/components/parameters/gameIdParam'
    /users:
        post:
            tags:
                - user
            description: Create a new user.
            operationId: createUser
            requestBody:
                description: The login informations.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginDto'
            responses:
                '201':
                    description: The new user has been correctly created.
                '400':
                    $ref: '#/components/responses/MalformedRequest'
                '422':
                    $ref: '#/components/responses/InvalidContent'
    /users/sign-in:
        post:
            tags:
                - user
            description: Login as a user
            operationId: getUserToken
            requestBody:
                description: The login informations.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginDto'
            responses:
                '200':
                    description: The user has entered correct authentification informations.
                    headers:
                        Authorization:
                            description: The token allowing acces to the resources.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MeDto'
                '400':
                    $ref: '#/components/responses/MalformedRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
    /user/{userId}:
        get:
            tags:
                - user
            description: Return the profile of the user.
            responses:
                '200':
                    description: The profile of the user.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDto'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '422':
                    $ref: '#/components/responses/InvalidContent'
            security:
                - jwt:
                    - read:user
        parameters:
            - $ref: '#/components/parameters/userIdParam'

components:
    schemas:
        ErrorDto:
            type: object
            properties:
                errorCode:
                    type: integer
                    description: A code to inform the client of the error origin.
                msg:
                    type: string
        IEndpointDto:
            type: object
            properties:
                endpoint:
                    type: string
                    description: The endpoint used to get more information about the object.
        MeDto:
            allOf:
                - $ref: '#/components/schemas/PlayerDto'
                - $ref: '#/components/schemas/IEndpointDto'
                - type: object
                  properties:
                      notifications:
                          $ref: '#/components/schemas/IEndpointDto'
                      invitations:
                          $ref: '#/components/schemas/IEndpointDto'
                      adversaires:
                          $ref: '#/components/schemas/IEndpointDto'
                      relations:
                          $ref: '#/components/schemas/IEndpointDto'
                      modes:
                          $ref: '#/components/schemas/IEndpointDto'
        ModeSummaryDto:
            allOf:
                - $ref: '#/components/schemas/IEndpointDto'
        ModeDto:
            allOf:
                - type: object
                  properties:
                      messages:
                          $ref: '#/components/schemas/IEndpointDto'
                - $ref: '#/components/schemas/IEndpointDto'
        MessageDto:
            type: object
            properties:
                id:
                    type: integer
                senderId:
                    type: integer
                senderName:
                    type: string
                content:
                    type: string
        TileDto:
            type: object
            nullable: true
            properties:
                id:
                    type: integer
                value:
                    type: string
                    description: The character of the tile.
                score:
                    type: integer
                    description: The score of the tile.
        SlotDto:
            type: object
            discriminator:
                propertyName: dType
            properties:
                sideId:
                    type: integer
                pos:
                    type: integer
                tile:
                    $ref: '#/components/schemas/TileDto'
                dType:
                    type: string
                    description: Used by jackson to determine polymorphism.
        RackDto:
            type: object
            properties:
                tiles:
                    type: array
                    items:
                        $ref: '#/components/schemas/TileDto'
        SwapRackDto:
            allOf:
                - $ref: '#/components/schemas/RackDto'
        PlayerRackDto:
            allOf:
                - $ref: '#/components/schemas/RackDto'
        ChallengeDto:
            type: object
            properties:
                swapRack:
                    $ref: '#/components/schemas/SwapRackDto'
                slots:
                    type: array
                    maxItems: 7
                    minItems: 7
                    items:
                        $ref: '#/components/schemas/SlotDto'

        PlayerDto:
            type: object
            discriminator:
                propertyName: dType
            properties:
                id:
                    type: integer
                name:
                    type: string
                avatar:
                    type: string
                    format: byte
                    description: Base64 representation of the binary image.
                dType:
                    type: string
                    description: Used by jackson to determine polymorphism.
        RelationDto:
            type: object
            properties:
                userId:
                    type: integer
                status:
                    type: string
                    enum: [FRIEND, BLOCKED, NONE]
        UserSummaryDto:
            type: object
            allOf:
                - $ref: '#/components/schemas/PlayerDto'
                - $ref: '#/components/schemas/IEndpointDto'
        RelatedUserSummaryDto:
            type: object
            allOf:
                - $ref: '#/components/schemas/PlayerDto'
                - type: object
                  properties:
                    relation:
                        $ref: '#/components/schemas/RelationDto'
                - $ref: '#/components/schemas/IEndpointDto'
        UserDto:
            type: object
            allOf:
                - $ref: '#/components/schemas/PlayerDto'
                - type: object
                  properties:
                      level:
                          type: integer
                      profilImage:
                          type: string
                          format: byte
                          description: Base64 representation of the binary image.
                - $ref: '#/components/schemas/IEndpointDto'
        AnswerDto:
            type: object
            properties:
                sideId:
                    type: integer
                num:
                    type: integer
                    description: The number indicating the position of the answer in the history of the game.
                word:
                    type: string
                score:
                    type: integer
        SideDto:
            type: object
            properties:
                id:
                    type: integer
                score:
                    type: integer
                player:
                    $ref: '#/components/schemas/PlayerDto'
                challenge:
                    $ref: '#/components/schemas/ChallengeDto'
                playerRack:
                    $ref: '#/components/schemas/PlayerRackDto'
        OtherSideDto:
            description: The side use to hide protected information from the adversary.
            type: object
            properties:
                id:
                    type: integer
                score:
                    type: integer
                player:
                    $ref: '#/components/schemas/PlayerDto'
                challenge:
                    $ref: '#/components/schemas/ChallengeDto'
        PowerDto:
            description: The power/bonus
            type: object
            properties:
                name:
                    type: string
        GameDto:
            allOf:
                - type: object
                  properties:
                      id:
                          type: integer
                      lang:
                          type: string
                      startDate:
                          type: string
                          format: datetime
                      yourTurn:
                          type: boolean
                      bagSize:
                         type: integer
                      mySide:
                          $ref: '#/components/schemas/SideDto'
                      otherSide:
                          $ref: '#/components/schemas/OtherSideDto'
                      challenges:
                          $ref: '#/components/schemas/IEndpointDto'
                      powers:
                          $ref: '#/components/schemas/IEndpointDto'
                - $ref: '#/components/schemas/IEndpointDto'
        GameSummaryDto:
            type: object
            allOf:
                - type: object
                  properties:
                      id:
                          type: integer
                      name:
                          type: string
                - $ref: '#/components/schemas/IEndpointDto'
        LoginDto:
            type: object
            properties:
                login:
                    type: string
                password:
                    type: string
                    format: password
        NotificationDto:
            type: object
        InvitationDto:
            type: object
    parameters:
        gameIdParam:
            name: gameId
            in: path
            description: ID of the game to use.
            required: true
            schema:
                type: integer
        userIdParam:
            name: userId
            in: path
            description: ID of the user to use.
            required: true
            schema:
                type: integer
        modeIdParam:
            name: modeId
            in: path
            description: ID of the mode to use.
            required: true
            schema:
                type: integer
    responses:
        Unauthorized:
            description: No authorization has been given.
            links:
                sign-in: 
                    operationId: getUserToken
                sign-up:
                    operationId: createUser
        MalformedRequest:
            description: The request was malformed.
        InvalidContent:
            description: The content of the request produced, when processed, an exception.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorDto'
    securitySchemes:
        jwt:
                type: http
                scheme: bearer
                bearerFormat: JWR
